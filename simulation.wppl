// STATE
// car-loc
// car-speed
// time
// carCrossTime
// pedCrossTime

var printState = function(state) {
  console.log("Loc:" + state.carLocation);
  console.log("Speed:" + state.speed);
  console.log("Time:" + state.time);
  console.log("Car Cross Time:" + state.carCrossTime);
  console.log("Ped Cross Time:" + state.pedCrossTime)
}

var movePrior =  function(state, player) {
  if (player === "car") {
    return carPrior(state);
  } else {
    return pedPrior(state);
  }
};

var pedPrior = function(state){
  return Infer({ model() {
    if (state.pedCrossTime != -1) {
      return "wait";
    } else {
      if (state.carCrossTime != -1) {
        return "cross";
      }
      return flip(0.5) ? "cross" : "wait";
    }
  }});
};

var validCarMove = function(state, action) {
  return !(state.speed == 0 && action == -1);
}

var carPrior = function(state){
  return Infer({ model() {
     var move = randomInteger(3) - 1;
    condition(validCarMove(state, move));
    return move;
  }});
};

var transition = function(state, move, player) {
  if (player == "car") {
    var loc = state.carLocation - state.speed;
    var old_time = state.time;
    return {
      carLocation: loc,
      speed: state.speed + move,
      carCrossTime: (loc <= 0 && state.carCrossTime == -1) ? old_time : state.carCrossTime,
      pedCrossTime: state.pedCrossTime,
      time: state.time + 1
    };
  } else {
    return {
      carLocation: state.carLocation,
      speed: state.speed,
      carCrossTime: state.carCrossTime,
      pedCrossTime: (move === "cross") ? state.time : state.pedCrossTime,
      time: state.time
    };
  }
};

var crashed = function(state) {
  return (state.carCrossTime != -1 && (state.carCrossTime === state.pedCrossTime));
};

var carReward = function(state) {
  return -state.carCrossTime + 50;
};

var pedReward = function(state) {
  return -state.pedCrossTime + 50;
};

var utility = function(state, player) {
  if (player == "car") {
    if (crashed(state)) {
      return -100;
    } else if (state.carCrossTime != -1) {
      return carReward(state);
    } else {
      return -1;
    }
  } else {
    if (crashed(state)) {
      return -1000;
    } else if (state.pedCrossTime != -1) {
      return pedReward(state);
    } else {
      return -1;
    }
  }
};

var isTerminal = function(state) {
  return (crashed(state) || (state.pedCrossTime != -1 && state.carCrossTime != -1));
};

var otherPlayer = function(player) {
  return (player === "car" ? "ped" : "car");
};

var act = function(state, player, depth) {
  return Infer({method: "enumerate", maxExecutions: 10, model() {
    var move = sample(movePrior(state, player));
    var old_speed = state.speed;
    var eu = expectation(Infer({method: "enumerate", maxExecutions: 4, model() {
      var new_state = _.clone(state);
      var new_speed = old_speed + randomInteger(3) - 1;
      Object.defineProperty(new_state, 'speed', {value: new_speed < 0 ? old_speed : new_speed})
      var outcome = simulate(new_state, move, player, depth - 1);
      return utility(outcome, player);
    }}));
    factor(eu);
    return move;
  }});
  };

var simulate = function(state, action, player, depth) {
  var nextState = transition(state, action, player);
  if (isTerminal(nextState) || depth <= 0) {
    return nextState;
  } else {

    var nextPlayer = otherPlayer(player);
    var nextAction = sample(act(nextState, nextPlayer, depth));
    return simulate(nextState, nextAction, nextPlayer, depth);
  }
};

var crashState = {
  carLocation: 1,
  speed: 3,
  time: 5,
  carCrossTime: -1,
  pedCrossTime: -1
}

viz.table(act(crashState, "ped", 3));