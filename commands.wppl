/*
var dummyState = makeState(-1, 1, false);
Object.defineProperty(dummyState, "carCrossTime", {value:-2});
console.log("Unit test 1: Pedestrian should always cross and car should act random");
analyzeState(dummyState);

var dummyState2 = makeState(6, 3, false);
console.log("Unit test 2: Pedestrian should always wait and car should never slow down");
analyzeState(dummyState2);

var ambigState1 = makeState(7, 3, false);
console.log("Ambiguous state: Either car speeds up and ped waits or ped crosses and car slows down.");
console.log("Always crash no matter what");

analyzeState(ambigState1);
simulateFromState(ambigState1);

console.log("Same ambiguous state when the car is driverless");
var ambigState2 = makeState(7, 3, true);
simulateFromState(ambigState2);

var ambigState3 = makeState(8, 4, false);
console.log("In this state with no misinformation, ped waits for car.");
console.log("If ped's prob of not seeing car is >0.4 ped crosses and crash happens");

viz(Infer({model() {
  var moves = sample(actBoth(ambigState3, "ped", iMentalDepth, iFutureDepth, true));
  return moves.car;
}}));

viz(Infer({model() {
  var moves = sample(actBoth(ambigState3, "car", iMentalDepth, iFutureDepth, true));
  return moves.ped;
}}));
analyzeState(ambigState3);
simulateFromState(ambigState3);
*/

var someStateFalse = makeState(10, 4, false);
var someStateTrue = makeState(10, 4, true);
var halfStateFalse = makeState(5, 2, false);
var frame2 = makeState(3, 3, false);
/*
viz(Infer({model() {
  var move = sample(actMine(someStateFalse, "ped", 3, 5, true));
  return move;
}}));
*/
Object.defineProperty(frame2, 'crossingTurns', {value: maxCrossingTurns});
printState(frame2);
/*
viz(Infer({model() {
  var move = sample(actMine(frame2, "car", 3, 7, true));
  return move;
}}));

viz(Infer({model() {
  var utility = postActMine(frame2, "car", 0, 3, 7, true);
  return utility;
}}));

viz(Infer({model() {
  var utility = postActMine(frame2, "car", -1, 3, 7, true);
  return utility;
}}));
*/
