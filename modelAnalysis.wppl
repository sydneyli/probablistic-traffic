var makeState = function (carLocation, speed) {
  return {
    carLocation: carLocation,
    speed: speed,
    time: 0,
    carCrossTime: -1,
    pedCrossTime: -1,
    crashedTime: -1,
    crossingTurns: -1
  };
};

var printState = function(state) {
  console.log("Loc:" + state.carLocation);
  console.log("Speed:" + state.speed);
  console.log("Time:" + state.time);
  console.log("Car Cross Time:" + state.carCrossTime);
  console.log("Ped Cross Time:" + state.pedCrossTime);
  console.log("Crashed Time:" + state.crashedTime);
  console.log("Crossing turns:" + state.crossingTurns);
};

var getActionDistribution = function(state, player) {
  print("Action Distribution for " + player + ":");
  viz(act(state, player, defaultDepth));
};

var getOutcomeDistribution = function(state, player, move) {
  var crashOutcomes = Infer({method: "enumerate", maxExecutions: simulateExecutions, model() {
    var outcome = getNewOutcome(state, move, player, defaultDepth);
    return outcome.crashedTime;
  }});
  var utilityOutcomes = Infer({method: "enumerate", maxExecutions: simulateExecutions, model() {
    var outcome = getNewOutcome(state, move, player, defaultDepth);
    return utility(outcome, player);
  }});
  var carCrossOutcomes = Infer({method: "enumerate", maxExecutions: simulateExecutions, model() {
    var outcome = getNewOutcome(state, move, player, defaultDepth);
    return outcome.carCrossTime;
  }});
  var pedCrossOutcomes = Infer({method: "enumerate", maxExecutions: simulateExecutions, model() {
    var outcome = getNewOutcome(state, move, player, defaultDepth);
    return outcome.pedCrossTime;
  }});
  print("Outcome Distribution for " + player + " doing " + move + ":");
  print("Crashed?");
  viz(crashOutcomes);
  print("Utility:");
  viz(utilityOutcomes);
  print("When car crossed:");
  viz(carCrossOutcomes);
  print("When pedestrian crossed:");
  viz(pedCrossOutcomes);
};

var analyzeState = function(state) {
  getActionDistribution(state, "ped");
  getOutcomeDistribution(state, "ped", "cross");
  getOutcomeDistribution(state, "ped", "wait");
  getActionDistribution(state, "car");
  getOutcomeDistribution(state, "car", -1);
  getOutcomeDistribution(state, "car", 0);
  getOutcomeDistribution(state, "car", 1);
};
