// STATE
// car-loc
// car-speed
// time
// carCrossTime
// pedCrossTime
// crashed
// crossingTurns
// isCarDriverless

const pedCrossReward = 50;
const carCrossReward = 50;
const carTimeCost = 1;
const pedTimeCost = 1;
const carCrashReward = -100;
const pedCrashReward = -1000;
const maxCrossingTurns = 3;

// regular car
const regularCarMissPedProb = 0.3;
const regularCarPriors = [0.33, 0.33, 0.33];

// driverless car
const driverlessCarMissPedProb = 0.01;
const driverlessPriors = [0.5, 0.4, 0];

const missPedProb = 0;
const missCarProb = 0.3;
const speedProbs = [0.2, 0.3, 0.35, 0.1, 0.05];

const pedCrossPrior = 0.5;
const carPriors = [0.33, 0.33, 0.33];
const carMoves = [-1, 0, 1];

const defaultDepth = 3;
const actExecutions = 10;
const simulateExecutions = 4;

var pedPrior = function(state){
  return Infer({ model() {
    if (state.pedCrossTime != -1 || state.crashed || state.crossingTurns > -1) {
      return "wait";
    } else {
      if (state.carCrossTime != -1) {
        return "cross";
      }
      return flip(state.pedCrossPrior) ? "cross" : "wait";
    }
  }});
};

var validCarMove = function(state, move) {
  return !(state.speed === 0 && move == -1);
};

var carPrior = function(state){
  return Infer({ model() {
    var move = sample(Categorical({ps: carPriors, vs: carMoves}));
    condition(validCarMove(state, move));
    return move;
  }});
};

var transition = function(state, move, player) {
  var newState = _.clone(state);
  if (player == "car") {
    Object.defineProperty(newState, 'carLocation', {value: state.carLocation - state.speed});
    Object.defineProperty(newState, 'speed', {value: state.speed + move});
    Object.defineProperty(newState, 'carCrossTime', {value: (newState.carLocation <= 0 && state.carCrossTime == -1) ? state.time + 1 : state.carCrossTime});
    Object.defineProperty(newState, 'time', {value: state.time + 1});
    if(newState.carCrossTime === newState.time && (state.crossingTurns > -1)) {
      Object.defineProperty(newState, 'crashedTime', {value: newState.time});
    }
  } else {
    if (move === "cross") {
      Object.defineProperty(newState, 'crossingTurns', {value: maxCrossingTurns});
    } else if (state.crossingTurns > 1) {
      Object.defineProperty(newState, 'crossingTurns', {value: state.crossingTurns - 1});
    } else if (state.crossingTurns === 1) {
      Object.defineProperty(newState, 'crossingTurns', {value: -1});
      Object.defineProperty(newState, 'pedCrossTime', {value: state.time});
    }
  }
  return newState;
};

var crashed = function(state) {
  return state.crashedTime !== -1;
};

var carReward = function(state) {
  return carCrossReward-(carTimeCost*state.carCrossTime);
};

var pedReward = function(state) {
  return pedCrossReward-(pedTimeCost*state.pedCrossTime);
};
var isTerminal = function(state) {
  return (crashed(state) || (state.pedCrossTime != -1 && state.carCrossTime != -1));
};

var guessCarState = function(state) {
  var oldSpeed = state.speed;
  var newState = _.clone(state);
  if (!flip(missCarProb)) {
    var totalUncertainty = speedProbs.length;
    var uncertainty = mapN(function(x) { return oldSpeed - Math.floor(totalUncertainty/2) + x; }, totalUncertainty);
    var newSpeed = sample(Categorical({ps: speedProbs, vs: uncertainty}));
    Object.defineProperty(newState, 'speed', {value: newSpeed < 0 ? 0 : newSpeed});
  } else {
    Object.defineProperty(newState, 'speed', {value: 0});
  }
  return newState;
};

var guessPedState = function(state) {
  /*
   * The rest of this is to add uncertainty to the car's guess of how long it will take the pedestrian to finish crossing. However adding it makes the program really slow.
   */
  if (state.crossingTurns === maxCrossingTurns && flip(missPedProb)) {
    var newState = _.clone(state);
    Object.defineProperty(newState, 'crossingTurns', {value: -1});
    return newState;
  }
  return state;
};

