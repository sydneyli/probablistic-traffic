var otherPlayer = function(player) {
  return (player === "car" ? "ped" : "car");
};
var movePrior =  function(state, player) {
  if (player === "car") {
    return carPrior(state);
  } else {
    return pedPrior(state);
  }
};

var utility = function(state, player) {
  if (player == "car") {
    if (crashed(state)) {
      return  carCrash(state);
    } else if (state.carCrossTime != -1) {
      return carReward(state);
    } else {
      return -carTimeCost*state.time;
    }
  } else {
    if (crashed(state)) {
      pedCrash(state);
    } else if (state.pedCrossTime != -1) {
      return pedReward(state);
    } else {
      return -pedTimeCost*state.time;
    }
  }
};

var guessState = function(state, player) {
  if (player === "car") {
    return guessPedState(state);
  } else {
    return guessCarState(state);
  }
};

var postActMine = function(state, player, move, mentalDepth, futureDepth, addNoise) {
    var guessedState = addNoise ? guessState(state, player) : state;
    var other = otherPlayer(player);
    var mentalDepthChange = flip(0.5) ? 1 : 2;
    var othersMove = sample(actMine(guessedState, other, mentalDepth-mentalDepthChange, futureDepth, false));
    var moves = (player === "ped" ? {ped:move, car:othersMove} : {ped:othersMove, car:move});
    var eu = expectation(Infer({method: "enumerate", maxExecutions: simulateExecutions, model() {
      var outcome = mentalSimulate(guessedState, moves, player, mentalDepth, futureDepth-1);
      return utility(outcome, player);
    }}));
    return eu;
};

var actMine = function(state, player, mentalDepth, futureDepth, addNoise) {
  return Infer({method: "enumerate", maxExecutions: actExecutions, model() {
    if (mentalDepth <= 0) {
      return sample(movePrior(state, player));
    } else {
      var move = sample(movePrior(state, player));
      var moveEu = postActMine(state, player, move, mentalDepth, futureDepth, addNoise);
      factor(1000*moveEu);
      return move;
    }
  }});
};

var mentalSimulate = function(state, moves, player, mentalDepth, futureDepth) {
  var nextState = transition(state, moves);
  if (isTerminal(nextState) || futureDepth === 0) {
    return nextState;
  } else {
    var newMoves = {ped: sample(actMine(nextState, "ped", mentalDepth-1, futureDepth, false)), car: sample(actMine(nextState, "car", mentalDepth-1, futureDepth, false))};
    return mentalSimulate(nextState, newMoves, player, mentalDepth, futureDepth-1);
  }
};

var realSimulate = function(state, states) {
  states.push(state);
  if (!isTerminal(state)) {
    var pedMove = sample(actMine(state, "ped", iMentalDepth, iFutureDepth, true));
    var carMove = sample(actMine(state, "car", iMentalDepth, iFutureDepth, true));
    var moves = { ped: pedMove, car: carMove };
    var newState = transition(state, moves);
    realSimulate(newState, states);
  }
};
